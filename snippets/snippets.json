{
	"Parse Codeblock":
	{
		"prefix": "parse",
		"body":
		[
			"stack_var char sCmd[DUET_MAX_CMD_LEN]",
			"stack_var char sHeader[DUET_MAX_HDR_LEN]",
			"stack_var char sParam[DUET_MAX_PARAM_LEN]",
			"sCmd = data.text",
			"sHeader = DuetParseCmdHeader(sCmd)",
			"sParam = DuetParseCmdParam(sCmd)",
			"switch(sHeader)",
			"{",
			"\tcase 'HEADER':",
			"\t{",
			"\t\tif(sParam == 'VALUE')",
			"\t\t{",
			"\t\t$0",
			"\t\t}"
		],
		"description": "PARSE code block"
	},
	"Data_Event Codeblock":{
        "prefix": "data_event",
        "body": [
            "data_event[${1:device}]",
            "{",
            "\tonline:",
            "\t{",
            "\t\t$0",
            "\t}",
            "\toffline:{}",
            "\tcommand:{}",
            "\tstring:",
            "\t{",
            "\t\tstack_var char sAux[64]",
            "\t\tsAux = data.text",
            "\t}",
            "}"
        ],
        "description": "Basic DATA_EVENT block"
    },
    "Channel_Event Codeblock":{
        "prefix": "channel_event",
        "body": [
            "channel_event[${1:device},${2:channel}]",
            "{",
            "\ton:",
            "\t{",
            "\t\t$0",
            "\t}",
            "\toff:",
            "\t{",
            "\t\t",
            "\t}",
            "}"
        ],
        "description": "Basic CHANNEL_EVENT block"
    },
    "Level_Event Codeblock":{
        "prefix": "level_event",
        "body": [
            "level_event[${1:device},${2:level}]",
            "{",
            "\tstack_var integer nLevel",
            "\tnLevel = level.value",
            "\t",
            "\t$0",
            "}"
        ],
        "description": "Basic LEVEL_EVENT block"
    },
    "Timeline_Event Codeblock":{
        "prefix": "timeline_event",
        "body": [
            "timeline_event[${1:timeline}]",
            "{",
            "\t$0",
            "}"
        ],
        "description": "Basic TIMELINE_EVENT block"
    },
    "Button Event Codeblock":{
        "prefix": "button_event",
        "body": [
            "button_event[${1:device},${2:channel}]",
            "{",
            "\tpush:",
            "\t{",
            "\t\tstack_var integer nPush",
            "\t\tnPush = get_last(${2:channel})",
            "\t\t$0",
            "\t}",
            "}"
        ],
        "description": "Basic BUTTON_EVENT block with PUSH"
    },
    "Hold Event Codeblock":{
        "prefix": "hold",
        "body": [
            "hold[${1:time}${2:,repeat}]:",
            "{",
            "\t$0",
            "}"
        ],
        "description": "Basic HOLD event block"
    },
    "Release Event Codeblock":{
        "prefix": "release",
        "body": [
            "release:",
            "{",
            "\t$0",
            "}"
        ],
        "description": "Basic RELEASE event block"
    },
    "For Loop Codeblock":{
        "prefix": "for",
        "body": [
            "for(${1:var}=${2:start};${1:var}<=${3:end};${1:var}++)",
            "{",
            "\t$0",
            "}"
        ],
        "description": "Basic FOR loop block"
    },
    "If Codeblock":{
        "prefix": "if",
        "body": [
            "if(${1:conditional})",
            "{",
            "\t$0",
            "}"
        ],
        "description": "IF conditional block"
    },
    "Else Codeblock":{
        "prefix": "else",
        "body": [
            "else",
            "{",
            "\t$0",
            "}"
        ],
        "description": "ELSE code block"
    },
    "Else If Codeblock":{
        "prefix": "else if",
        "body": [
            "else if(${1:conditional})",
            "{",
            "\t$0",
            "}"
        ],
        "description": "ELSE IF conditional block"
    },
    "While Codeblock":{
        "prefix": "while",
        "body": [
            "while(${1:conditional})",
            "{",
            "\t$0",
            "}"
        ],
        "description": "WHILE conditional block"
    },
    "Switch Codeblock":{
        "prefix": "switch",
        "body": [
            "switch(${1:variable})",
            "{",
            "\tcase ${2:value}:",
            "\t{",
            "\t\t$0",
            "\t}",
            "}"
        ],
        "description": "SWITCH conditional block"
    },
    "Case Codeblock":{
        "prefix": "case",
        "body": [
            "case ${2:value}:",
            "{",
            "\t$0",
            "}"
        ],
        "description": "CASE conditional block"
    },
    "Select Codeblock":{
        "prefix": "select",
        "body": [
            "select",
            "{",
            "\tactive(${1:conditional}):",
            "\t{",
            "\t\t$0",
            "\t}",
            "}"
        ],
        "description": "SELECT conditional block"
    },
    "Active Codeblock":{
        "prefix": "active",
        "body": [
            "active(${2:value}):",
            "{",
            "\t$0",
            "}"
        ],
        "description": "ACTIVE conditional block"
	},
	"Wait Codeblock":{
		"prefix": "wait",
		"body":[
			"wait ${1:TIME} ${2:OPTIONAL_NAME}",
			"{",
			"\t$0",
			"}"
		],
		"description": "WAIT code block"
	},
    "Define_Function Codeblock":{
        "prefix": "define_function",
        "body": [
            "define_function ${1:function_name}(${2:parameters})",
            "{",
            "\t$0",
            "}"
        ],
        "description": "DEFINE_FUNCTION without RETURN code block"
	},
    "Define_Function Codeblock with return":{
        "prefix": "define_function",
        "body": [
            "define_function ${1:return_type} ${2:function_name}(${3:parameters})",
			"{",
			"\tstack_var integer nReturn",
			"\tnReturn = 0",
			"\t$0",
			"\treturn nReturn",
            "}"
        ],
        "description": "DEFINE_FUNCTION with RETURN code block"
	},	
	"Timeline_Create Function":
	{
		"prefix":"timeline_create",
		"body": "timeline_create(${1:_TLID},${2:lTimes},max_length_array(${2:lTimes}),${3:TIMELINE_RELATIVE|TIMELINE_ABSOLUTE},${4:TIMELINE_REPEAT|TIMELINE_ONCE})",
		"description": "timeline_create() function call"
	}, 
    "Get_Buffer_String Function":{
        "prefix":"get_buffer_string",
        "body":"get_buffer_string(${1:string},${2:length})",
        "description": "get_buffer_string() function call"
	},
    "Get_Buffer_Char Function":{
        "prefix":"get_buffer_char",
        "body":"get_buffer_char(${1:string})",
        "description": "get_buffer_string() function call"
	},	
    "Get_Last Function":{
        "prefix": "get_last",
        "body": "get_last(${1:array})$0",
        "description": "Get_Last() function call"
    },
    "Length_Array Function":{
        "prefix": "length_array",
        "body": "length_array(${1:var})$0",
        "description": "Length_Array() function call"
    },
    "Max_Length_Array Function":{
        "prefix": "max_length_array",
        "body": "max_length_array(${1:var})$0",
        "description": "Max_Length_Array() function call"
    },
    "Set_Length_Array Function":{
        "prefix": "set_length_array",
        "body": "set_length_array(${1:var},${2:length})$0",
        "description": "Set_Length_Array() function call"
    },
    "Length_String Function":{
        "prefix": "length_string",
        "body": "length_string(${1:var})$0",
        "description": "Length_String() function call"
    },
    "Find_String Function":{
        "prefix": "find_string",
        "body": "find_string(${1:where},${2:what},${3:startpos})$0",
        "description": "Find_String() function call"
    },
    "Remove_String Function":{
        "prefix": "remove_string",
        "body": "remove_string(${1:where},${2:what},${3:startpos})$0",
        "description": "Length_Array() function call"
    },
    "Left_String Function":{
        "prefix": "left_string",
        "body": "left_string(${1:var},${2:length})$0",
        "description": "Left_String() function call"
    },
    "Right_String Function":{
        "prefix": "right_string",
        "body": "right_string(${1:var},${2:length})$0",
        "description": "right_string() function call"
    },
    "Mid_String Function":{
        "prefix": "mid_string",
        "body": "mid_string(${1:var},${2:startpos},${3:endpos})$0",
        "description": "mid_string() function call"
    },
    "Integer Storage Type":{
        "prefix": "integer",
        "body": "integer $0",
        "description": "Integer variable type"
    },
    "SInteger Storage Type":{
        "prefix": "sinteger",
        "body": "sinteger $0",
        "description": "Signed Integer variable type"
    },
    "Char Storage Type":{
        "prefix": "char",
        "body": "char $0",
        "description": "Char variable type"
    },
    "Long Storage Type":{
        "prefix": "long",
        "body": "long $0",
        "description": "Long variable type"
    },
    "SLong Storage Type":{
        "prefix": "slong",
        "body": "slong $0",
        "description": "SLong variable type"
    },
    "Float Storage Type":{
        "prefix": "float",
        "body": "float $0",
        "description": "Float variable type"
    },
    "Double Storage Type":{
        "prefix": "double",
        "body": "double $0",
        "description": "Double variable type"
    },
    "Local_Var Declaration":{
        "prefix": "local_var",
        "body": "local_var $0",
        "description": "Local_Var context declaration"
    },
    "Local_Var Integer Declaration":{
        "prefix": "local_var integer",
        "body": "local_var integer $0",
        "description": "Local_Var Integer variable declaration"
    },
    "Local_Var SInteger Declaration":{
        "prefix": "local_var sinteger",
        "body": "local_var sinteger $0",
        "description": "Local_Var signed integer variable declaration"
    },
    "Local_Var Char Declaration":{
        "prefix": "local_var char",
        "body": "local_var char $0",
        "description": "Local_Var Char variable declaration"
    },
    "Local_Var Long Declaration":{
        "prefix": "local_var long",
        "body": "local_var long $0",
        "description": "Local_Var Long variable declaration"
    },
    "Local_Var SLong Declaration":{
        "prefix": "local_var slong",
        "body": "local_var slong $0",
        "description": "Local_Var SLong variable declaration"
    },
    "Local_Var Float Declaration":{
        "prefix": "local_var float",
        "body": "local_var float $0",
        "description": "local_var float variable declaration"
    },
    "Local_Var Double Declaration":{
        "prefix": "local_var double",
    "body": "local_var double $0",
        "description": "Local_var double variable declaration"
    },
    "stack_var Declaration":{
        "prefix": "stack_var",
        "body": "stack_var $0",
        "description": "stack_var context declaration"
    },
    "stack_var Char Declaration":{
        "prefix": "stack_var char",
        "body": "stack_var char $0",
        "description": "stack_var char context declaration"
    },
    "stack_var Integer Declaration":{
        "prefix": "stack_var integer",
        "body": "stack_var integer $0",
        "description": "stack_var integer context declaration"
    },
    "stack_var SInteger Declaration":{
        "prefix": "stack_var sinteger",
        "body": "stack_var sinteger $0",
        "description": "stack_var signed integer context declaration"
    },
    "stack_var Long Declaration":{
        "prefix": "stack_var long",
        "body": "stack_var long $0",
        "description": "stack_var long context declaration"
    },
    "stack_var SLong Declaration":{
        "prefix": "stack_var slong",
        "body": "stack_var slong $0",
        "description": "stack_var slong context declaration"
    },
    "stack_var Float Declaration":{
        "prefix": "stack_var float",
        "body": "stack_var FLOAT $0",
        "description": "stack_var float context declaration"
    },
    "stack_var Double Declaration":{
        "prefix": "stack_var double",
        "body": "stack_var DOUBLE $0",
        "description": "stack_var double context declaration"
    },
    "Volatile Integer Declaration":{
        "prefix": "volatile integer",
        "body": "volatile integer $0",
        "description": "volatile integer context declaration"
    },
    "Volatile Char Declaration":{
        "prefix": "volatile char",
        "body": "volatile char $0",
        "description": "volatile char context declaration"
    },    
    "Send_Command Function":{
        "prefix": "send_command",
        "body": "send_command ${1:device},${2:command}",
        "description": "Send_Command function declaration"
    },
    "Send_String Function":{
        "prefix": "send_string",
        "body": "send_string ${1:device},${2:string}",
        "description": "Send_String function declaration"
    },
    "Comment header":{
        "prefix": "_com",
        "body": [
            "// ---------------------------------------------------------------------------------------------------------------------",
            "// ${1:Comment}",
            "// ---------------------------------------------------------------------------------------------------------------------",
            "$0"
        ],
        "description": "Comment header block"
	},
    "Comment block":{
        "prefix": "_com_block",
        "body": [
            "/*",
            "${1:Comment}",
            "*/"
        ],
        "description": "Comment header block"
    },	
    "Upper_String Function":{
        "prefix": "upper_string",
		"body": 
		[
			"upper_string(${1:var})",
			"$0"
		],
        "description": "Upper_String() function call"
    },
    "Lower_String Function":{
        "prefix": "lower_string",
		"body": 
		[
			"lower_string(${1:var})",
			"$0"
		],
        "description": "lower_string() function call"
    },
    "Do_Push Function":{
        "prefix": "do_push",
        "body": "do_push(${1:dev},${2:channel})\n$0",
        "description": "do_push function declaration"
    },
    "Do_Push_Timed Function":{
        "prefix": "do_push_timed",
        "body": "do_push_timed(${1:dev},${2:channel})\n$0",
        "description": "do_push_timed function declaration"
    },
    "Do_Release Function":{
        "prefix": "do_release",
        "body": "do_release(${1:dev},${2:channel})\n$0",
        "description": "do_release function declaration"
    },
    "To Function":{
        "prefix": "to",
        "body": "to[${1:dev},${2:channel}]\n$0",
        "description": "To function declaration"
    },
    "Pulse Function":{
        "prefix": "pulse",
        "body": "pulse[${1:dev},${2:channel}]\n$0",
        "description": "Pulse function declaration"
    },
    "Set_Pulse_Time Function":{
        "prefix": "set_pulse_time",
        "body": "set_pulse_time(${1:time(tenth-of-seconds)})\n$0",
        "description": "Set_Pulse_Time function declaration"
    },
    "Add_Url_Entry Function":{
        "prefix": "add_url_entry",
        "body": "add_url_entry(${1:master_dev},${2:url_struct})\n$0",
        "description": [
            "Add_Url_Entry function declaration. Requires a D:P:S for the master_dev.\n",
            "The URL_STRUCT is predefined as follows:",
            "STRUCTURE URL_STRUCT",
            "{",
            "\tchar     Flags;           // Connection Type (normally 1)",
            "\tinteger  Port;            // TCP port (normally 1319)",
            "\tchar     URL[128];        // string: URL or IP address",
            "\tchar     User[20];        // optional account info for ICSPS",
            "\tchar     Password[20];    // optional account info for ICSPS",
            "}"
        ]
    },
    "Delete_Url_Entry Function":{
        "prefix": "delete_url_entry",
        "body": "delete_url_entry(${1:master_dev},${2:url_struct})\n$0",
        "description": [
            "Delete_Url_Entry function declaration. Requires a D:P:S for the master_dev.\n",
            "The URL_STRUCT is predefined as follows:",
            "STRUCTURE URL_STRUCT",
            "{",
            "\tchar     Flags;           // Connection Type (normally 1)",
            "\tinteger  Port;            // TCP port (normally 1319)",
            "\tchar     URL[128];        // string: URL or IP address",
            "\tchar     User[20];        // optional account info for ICSPS",
            "\tchar     Password[20];    // optional account info for ICSPS",
            "}"
        ]
    },
    "Get_Url_List Function":{
        "prefix": "get_url_list",
        "body": "get_url_list(${1:master_dev},${2:url_struct_array},${3|0,1,2|})\n$0",
        "description": [
            "Get_Url_List function declaration. Requires a D:P:S for the master_dev.\n",
            "The URL_STRUCT is predefined as follows:",
            "STRUCTURE URL_STRUCT",
            "{",
            "\tchar     Flags;           // Connection Type (normally 1)",
            "\tinteger  Port;            // TCP port (normally 1319)",
            "\tchar     URL[128];        // string: URL or IP address",
            "\tchar     User[20];        // optional account info for ICSPS",
            "\tchar     Password[20];    // optional account info for ICSPS",
            "}",
            "The third parameter is the type of URL: 0 = All, 1 = IDE Programmed, 2 = NetLinx Programmed"
        ]
    },
    "Ip_Client_Open function": {
        "prefix": "ip_client_open",
        "body": "ip_client_open(${1:localport},'${2:serveraddress}',${3:serverport},${4|IP_TCP,IP_UDP,IP_UDP_2WAY|})\n$0",
        "description": "Ip_Client_Open function definition"
    },
    "Ip_Client_Close function": {
        "prefix": "ip_client_close",
        "body": "ip_client_close(${1:localport})\n$0",
        "description": "Ip_Client_Close function definition"
    },
    "Ssh_Client_Open function": {
        "prefix": "ssh_client_open",
        "body": "ssh_client_open(${1:localport},'${2:serveraddress}',${3:serverport},'${4:username}','${5:password}','/certs/id_rsa','${6:keypass}')\n$0",
        "description": "Ssh_Client_Open function definition"
    },
    "Ssh_Client_Close function": {
        "prefix": "ssh_client_close",
        "body": "ssh_client_close(${1:localport})\n$0",
        "description": "Ssh_Client_Close function definition"
    },
    "Tls_Client_Open function": {
        "prefix": "tls_client_open",
        "body": "tls_client_open(${1:localport},'${2:serveraddress}',${3:serverport},0)\n$0",
        "description": "Tls_Client_Open function definition"
    },
    "Tls_Client_Close function": {
        "prefix": "tls_client_close",
        "body": "tls_client_close(${1:localport})\n$0",
        "description": "Tls_Client_Close function definition"
    }

}